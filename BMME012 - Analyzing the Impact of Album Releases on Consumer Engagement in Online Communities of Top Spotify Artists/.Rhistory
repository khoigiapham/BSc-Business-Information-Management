#Load require library
library(spotifyr)
library(dplyr)
library(tidyverse)
library(RedditExtractoR)
library(readxl)
library(tidyverse)
library(tidytext)
library(readr)
library(syuzhet)
#Set working directory
path <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(path)
#Get access to Spotify public data
Sys.setenv(SPOTIFY_CLIENT_ID = "9ed8f73ef63c4f6aaf199ac48609a099")
Sys.setenv(SPOTIFY_CLIENT_SECRET = "bec2d98c460146e897edb4831e6b8592")
access_token <- get_spotify_access_token()
## 1. Prepare the 1st dataset "text", which is used for sentiment analysis----
# Prepare an excel file that have the list of top 50 most followed artists
d.artists <- read.csv("data_additiona/artists.csv")
## 1. Prepare the 1st dataset "text", which is used for sentiment analysis----
# Prepare an excel file that have the list of top 50 most followed artists
d.artists <- read.csv("data_additional/artists.csv")
top_50 <- d.artists %>%
arrange(desc(followers)) %>%
slice(1:50) %>%
subset(select = "name")
write.xlsx(top_50, "data_additional/top_50.xlsx", sheetName = "Sheet1")
library(xlsx)
write.xlsx(top_50, "data_additional/top_50.xlsx", sheetName = "Sheet1")
# After we get the list, we manually searcged and fill in the community name
# of the the respective artists in that excel file and load it back.
community <- read_excel("data_additional/top_50_community.xlsx")
## Use (RedditExtractoR) package to get data from reddit
# Create an empty list to store tables
threads_list <- list()
## 1. Prepare the 1st dataset "text", which is used for sentiment analysis----
# Prepare an excel file that have the list of top 50 most followed artists
d.artists <- read.csv("artists.csv")
load("C:/Users/pkhoi/Desktop/Replication package/contents_list.RData")
# I also saved the 2 tables from this list
#Get the table threads and comments from the list
##final_threads <- contents_list$threads
##final_comments <- contents_list$comments
##saveRDS(final_threads,"final_threads.RDS")
##saveRDS(final_comments,"final_comments.RDS")
final_threads <- readRDS("final_threads.RDS")
final_comments <- readRDS("final_comments.RDS")
# Save the data
##saveRDS(top_50_album, "top_50_album.rds")
# Load data
top_50_album <- readRDS("top_50_album.rds")
finaldata <- readRDS("data_final/data_prepared.RDS")
#2 Machine learning modelling----
#Factoring the output variable
finaldata$release_effects <- ifelse(finaldata$release_effects == "positive", 1, 0)
# finaldata$release_effects <- factor(finaldata$release_effects, levels = c("positive", "negative"))
colTypes   <- sapply(finaldata, class)
colNumeric <- which(colTypes == "numeric" | colTypes == "integer")
colNumeric <- colNumeric[colNumeric != which(names(finaldata) == "num_markets") &
colNumeric != which(names(finaldata) == "release_effects")]
finaldata[, colNumeric] <- scale(finaldata[, colNumeric])
# Create the model formula
mdlA <- release_effects ~ danceability + energy + key + loudness + mode + speechiness +
acousticness + instrumentalness + liveness + valence + tempo
# Create subset of finaldata, with just the sonic characteristics in it
sonic_vars <- c("danceability", "energy", "key", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo")
finaldata_soniconly <- finaldata[, sonic_vars]
# Run k-means clustering with 2, 3, and 4 clusters
kmeans_2 <- kmeans(finaldata_soniconly, centers = 2)
# Run k-means clustering with 2, 3, and 4 clusters
kmeans_2 <- kmeans(finaldata_soniconly, centers = 2)
kmeans_3 <- kmeans(finaldata_soniconly, centers = 3)
kmeans_4 <- kmeans(finaldata_soniconly, centers = 4)
# Create cluster plots for each k-means result
clusplot(finaldata_soniconly, kmeans_2$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0, main = "K-means Clustering with 2 Clusters")
clusplot(finaldata_soniconly, kmeans_3$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0, main = "K-means Clustering with 3 Clusters")
clusplot(finaldata_soniconly, kmeans_4$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0, main = "K-means Clustering with 4 Clusters")
# Provide a descriptive summary per assigned cluster for cluster interpretation
# with describeBy from psych package
tmp <- describeBy(finaldata_soniconly, group = kmeans_3$cluster)
library(spotifyr)
library(RedditExtractoR)
library(dplyr)
library(tidyr)
library(ggplot2)
library(psych)
library(plyr)
library(glmnet)
library(glmnetUtils)
library(stargazer)
library(caret)
library(e1071)
library(rpart)
library(randomForest)
library(nnet)
library(mice)
library(class)
library(ROCR)
library(cluster)
library(ape)
library(rpart.plot)
library(proxy)
library(forcats)
#2 Machine learning modelling----
#Factoring the output variable
finaldata$release_effects <- ifelse(finaldata$release_effects == "positive", 1, 0)
# finaldata$release_effects <- factor(finaldata$release_effects, levels = c("positive", "negative"))
colTypes   <- sapply(finaldata, class)
colNumeric <- which(colTypes == "numeric" | colTypes == "integer")
colNumeric <- colNumeric[colNumeric != which(names(finaldata) == "num_markets") &
colNumeric != which(names(finaldata) == "release_effects")]
finaldata[, colNumeric] <- scale(finaldata[, colNumeric])
# Create the model formula
mdlA <- release_effects ~ danceability + energy + key + loudness + mode + speechiness +
acousticness + instrumentalness + liveness + valence + tempo
# Create subset of finaldata, with just the sonic characteristics in it
sonic_vars <- c("danceability", "energy", "key", "loudness", "mode", "speechiness",
"acousticness", "instrumentalness", "liveness", "valence", "tempo")
finaldata_soniconly <- finaldata[, sonic_vars]
# Run k-means clustering with 2, 3, and 4 clusters
kmeans_2 <- kmeans(finaldata_soniconly, centers = 2)
kmeans_3 <- kmeans(finaldata_soniconly, centers = 3)
kmeans_4 <- kmeans(finaldata_soniconly, centers = 4)
# Create cluster plots for each k-means result
clusplot(finaldata_soniconly, kmeans_2$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0, main = "K-means Clustering with 2 Clusters")
clusplot(finaldata_soniconly, kmeans_3$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0, main = "K-means Clustering with 3 Clusters")
clusplot(finaldata_soniconly, kmeans_4$cluster, color = TRUE, shade = TRUE,
labels = 2, lines = 0, main = "K-means Clustering with 4 Clusters")
# Provide a descriptive summary per assigned cluster for cluster interpretation
# with describeBy from psych package
tmp <- describeBy(finaldata_soniconly, group = kmeans_3$cluster)
# Make a table with means and standard deviations
# (columns 3 and 4 in the tmp object) of the sonic characteristics per assigned cluster
stargazer(cbind(tmp$`1`[3:4], tmp$`2`[3:4], tmp$`3`[3:4]),
type = "text", align = TRUE, no.space = TRUE, summary = FALSE)
# Provide the decision tree for cluster interpretation
# Model
mdlA_finaldata <- cluster ~ danceability + energy + key + loudness + mode + speechiness +
acousticness + instrumentalness + liveness + valence + tempo
# Add cluster assignments to the finaldata
finaldata$cluster <- kmeans_3$cluster
# Train the tree
tree_finaldata <- rpart(mdlA_finaldata, data = finaldata,
method = "class", parms = list(split = "information"))
# Plot the decision tree
rpart.plot(tree_finaldata,
main = "Decision tree for finaldata dataset, K = 3",
box.col = c("yellow", "orange", "green")[tree_finaldata$frame$yval],
extra = 104)
# Split the dataset into groups based on the cluster labels
cluster_groups <- split(finaldata, finaldata$cluster)
#Draw correlation plot:
corr <- cor(finaldata[, c(6:16)])
corplot <- corrplot(corr, method = "circle", type = "upper")
library(corrplot )
#Draw correlation plot:
corr <- cor(finaldata[, c(6:16)])
corplot <- corrplot(corr, method = "circle", type = "upper")
corr
#Draw correlation plot:
corr <- cor(finaldata[, c(6:16,18)])
#Draw correlation plot:
corr <- cor(finaldata[, c(6:16,18)])
corr <- cor(finaldata[, c(6:16,18)])
